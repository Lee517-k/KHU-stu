============================
 matplotlib: 영상 표시
============================


컬러영상
----------

openCV와 matplotlib 패키지의 pyplot을 import한다.

.. code::

  import cv2
  from matplotlib import pyplot as plt
  
이미지를 읽어온다.

.. code::

  imgFile = '경로/이미지.jpg'
  imgBGR = cv2.imread(imgFile)
  
pyplot은 기본적으로 축을 윈도우에 보여주기 때문에 기능을 꺼준다.

.. code::
  
  plt.axis('off')
  
pyplot을 이용하여 이미지를 윈도우에 출력한다.

    matplotlib은 RGB순서로 처리하기 때문에 이미지의 출력이 openCV(BGR)를 이용한 출력과 다르다.
  
.. code::

    plt.imshow(imgBGR)
    plt.show()
    
openCV로 읽은 이미지를 pyplot으로 정상적으로 출력하고 싶다면 채널순서를 바꿔야한다.

.. code::
    
    imgRGB = cv2.cvtColor(imgBGR, cv2.COLOR_BGR2RGB)
    plt.imshow(imgRGB)
    plt.show()
    
흑백영상
---------
    
흑백영상으로도 표시 가능하다.

    흑백으로 읽어 올 수도 있지만, cvtColor()을 이용하여 그레이스케일로 바꿀 수도 있다.
    
    'gray'컬러맵으로 'bicubic'으로 보간(interpolation)하여 표시한다.
    
    영상을 복원할 때 값을 추정하는 것을 '보간'이라 하며 bicubic은 추정을 2차함수를 이용하여 추정하는 것이다.

.. code::

    imgGray = cv2.imread(imgFile, cv2.IMREAD_GRAYSCALE)
    plt.imshow(imgGray, cmap="gray", interpolation = 'bicubic')
    plt.show()
    
여백조정
---------

표시되는 영상과 윈도우 사이의 여백을 조정하여 비율을 맞출 수 있다.

멤버함수의 호출 순서가 달라지면 다른 출력결과를 얻을 수 있으므로 순서에 주의해야한다.

    plt.figure()는 표시되는 figure(영상)의 크기를 설정한다.
    
    plt.subplots_adjust()는 영상의 출력범위를 좌우, 위아래를 각각 [0,1], [0,1]로 조정한다. (left < right, bottom < top 이어야 한다.)
    
    plt.axis('tight')는 data를 다 볼 수 있도록 충분히 크게 설정한다.
    

.. code::
    
    plt.figure(figsize = (6,6))
    plt.subplots_adjust(left = 0, right = 1, bottom = 0, top = 1)
    plt.imshow(imGray, cmap = 'gray')
    plt.axis('tight')
    plt.axis('off')
    plt.show()
    
저장
-------

영상을 원하는 위치에 저장이 가능하다.

.. code::
    
    plt.savefig('경로/이름.png')
    
subplot에 영상 표시
----------------------

경로를 설정할 때 문자열의 특성을 이용하여 공통된 부분을 간결히 할 수 있다.

.. code::
    
    path='공통경로/'
    imgBGR1 = cv2.imread(path + '이미지1.jpg')
    imgBGR2 = cv2.imread(path + '이미지2.jpg')
    imgBGR3 = cv2.imread(path + '이미지3.jpg')
    imgBGR4 = cv2.imread(path + '이미지4.jpg')
    
pyplot을 이요하기 위해 채널 처리순서를 바꿔준다.

.. code::

    imgRGB1 = cv2.cvtColor(imgBGR1, cv2.COLOR_BGR2RGB)
    imgRGB2 = cv2.cvtColor(imgBGR2, cv2.COLOR_BGR2RGB)
    imgRGB3 = cv2.cvtColor(imgBGR3, cv2.COLOR_BGR2RGB)
    imgRGB4 = cv2.cvtColor(imgBGR4, cv2,COLOR_BGR2RGB)
    
subplot을 설정하고 윈도우 이름을 바꾼다.

    설정된 subplot에 ax를 배치하도록 fig를 설정한다.
    
    figure 객체fig를 이용하여 윈도우의 이름을 바꾼다.
    
    sharex/sharey는 각 축의 눈금을 공유 여부를 설정한다.
    
.. code::
    
    fig, ax = plt.subplots(2,2, figsize = (10,10), sharey = True)
    fig.canvas.manager.set_window_title('윈도우 이름')
    
subplot에 배치될 ax를 설정한다.

    ax는 2x2개의 tuple을 가진 array이다.
    
    aspect는 equal/auto로 설정하고 기본값은 equal이다. equal은 축과 픽셀의 비가 1:1이고 auto는 축을 고정시키고 data를 다 보여주도록 축과 픽셀의 비를 조정한다.
    
.. code::
    
    ax[0][0].axis('off')
    ax[0][0].imshow(imgRGB1, aspect = 'auto')
    ax[0][1].axis('off')
    ax[0][1].imshow(imgRGB1, aspect = 'auto')
    ax[1][0].axis('off')
    ax[1][0].imshow(imgRGB1, aspect = 'auto')
    ax[1][1].axis('off')
    ax[1][1].imshow(imgRGB1, aspect = 'auto')
    
subplot의 크기와 figure 사이의 간격을 설정한다.

.. code::
    
    plt.subplots_adjust(left=0, right=1, bottom=0, top=1, wspace=0.05, hspace=0.05)
    
figure을 저장할 때 figure 바깥의 여백을 조절할 수 있다.

    bbox_inches는 figure와 같이 저장되는 여백을 설정한다. 기본값은 None이며 tight로 설정하면 여백을 최대한 줄이고 저장된다.

.. code::

    plt.savefig("경로/영상.타입", bbox_inches = 'tight')
