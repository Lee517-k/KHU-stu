#include <iostream>
#include <fstream> // file 읽고 쓰는 헤더
#include <string> //문자 data type 객체를 사용
using namepsace std;

//한 문자를 쓰기->fout.put(), 읽기->fin.get()
//                  |   ifstream      |   ofstream
//------------------|-----------------|-----------------
//    char          |   fin.get(ch)   |   fout.put(ch)
//word(공백,줄바꿈) |   fin >> s      |    fout << s
//  line(줄바꿈)    |   getline(fin,s)|    fout << s
//1) fout/fin 사용시 반드시 시작 open(), 끝 close()
//2) fin에서 파일 open실패, EOF 읽을 경우 구현 -> (fin==false) or (!fin==true)
int main() {
  char ch;
  ofstream fout("char.txt"); //텍스트파일을 만듦과 동시에 열기
  while(true) {
    cin >> ch;
    if(ch=='q')
      break;
    fout.put(ch);
  }
  fout.close();
  
  ifstream fin("char.txt");
  cout << endl << endl;
  while(true) {
    fin.get(ch);
    if(!fin)
      break;
    cout << ch << endl; //텍스트파일에서 읽어온 글자를 ch에 넣어놓고 출력
  }
  fin.close();
  
  return 0;
}
-----------------------------------------------------------------------------------
int main() {
  ofstream fout; //fout은 instance이므로 꼭 이름일 필요는 없다.
  fout.open("example.txt"); // 덮어쓰기 방식
  fout.open("example.txt", ios::app); // 이어쓰기 방식
  
  string s = "Object oriented programming";
  
  fout << s << endl; //fout: 텍스트 파일에 s 저장
  fout << "Linear algebra" << endl;
  fout << "Random process" << endl;
  fout.close();
  
  ifstream fin;
  fin.open("example.txt");
  if (!fin) { // 파일을 제대로 읽지 못했거나 EOF를 읽으면
    cout << "File open error" << endl;
    exit(100); // 프로그램 강제 종료
  }
  
  //getline(ifstream instance, string instance): ifstream으로 한줄씩 읽어서 string에 저장
  //줄바꿈 기준으로 문자열을 구분
  while (getline(fin,s)) {
    cout << s << endl;
  }
  //ifstream  >> string
  //띄어쓰기, 줄마꿈을 기준으로 문자열을 구분
  while (true) {
    fin >> s;
    if (!fin)
      break;
    cout << s << endl;
  }
  fin.close();
  return 0;
}
------------------------------------------------------------------------------
//string : 문자열 객체
int main() {
  string s = "fred";
  cout << "s: " << s << endl; // 출력: fred
  cout << s.size() << endl << endl; // s.length()와 같이 문자의 개수를 반환 // 출력: 4
  cout << s.empty() << endl; // s.empty(): 문자열이 공백인지를 확인 true:1 , false:0 // 출력: 0
  s.clear(); // s를 빈 문자열로 만듦. s=""
  cout << "s: " << s << endl; // 출력: 
  cout << s.empty() << endl; // 출력: 1
  
  s = "Good";
  s += "-bye";
  cout << "s: " << s << endl; // 출력: Good-bye
  cout << s[4] << ", " << s.at(4) << endl << endl; // 출력: -, - ; zero base indexing
  cout << s.substr(5,2) << endl; //전체 문자열에서 특정 문자열만 추출; 5번째 부터 2개 추출 // 출력: by
  cout << s.substr(5,3) << endl; // 출력 : bye
  cout << s.find("od") << endl; // 원하는 문자열의 시작 index 알려줌 // 출력: 2
  cout << s.find("od",5) << ", " << stirng::npos << endl; //2번째 parameter는 default로 0값. 찾기 시작하는 위치를 지정할 수 있음
  //string::npos 찾지 못했을 때 반환해주는 값
  // "od"가 없는 경우 구현 -> if(s.find("od",5)==string::npos)
  
  //2번째 등장하는 "od"찾기
  s += "-od";
  string key = "od";
  cout << "s: " << s << endl; //출력: Good-bye-od
  int index = s.find(key);
  cout << index << endl; //출력: 2
  cout << s.find("od", index + key.size()) << endl; //첫번째 "od"이후의 "od"의 시작 index 찾아줌 //출력: 9
  
  return 0;
}
