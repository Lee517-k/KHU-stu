#include <iostream>
using namespace std;

//pass by value(복사) : int a = x;, int b = y; -> a, b를 바꿔도 x, y가 바뀌지는 않음
//pass by reference(참조) : int& a = x;, int& b =y; a, b를 바꾸면 x, y가 따라서 바뀜
//                        : 복사할 필요가 없으니 하나의 메모리칸으로 두개의 변수 운용가능 ; 메모리 효율이 좋음

void swap(int& a, int& b) {
  int temp = a;
  a = b;
  b = temp;
}

int main() {
  int x = 10, y = 1000;
  cout << x << '\t' << y << endl;
  swap(x,y);
  cout << x << '\t' << y << endl;
  return 0;
} 
------------------------------------------------------------------------
int main() {
  int x = 10;
  int& y = x;
  cout << x << '\t' << y << endl; // 출력: 10 10
  x = 1000;
  cout << x << '\t' << y << endl; // 출력: 1000 1000
  y = 100;
  cout << x << '\t' << y << endl; // 출력: 100  100
  return 0;
}
-----------------------------------------------------------------------
//local variable(지역변수): 함수 안에서 선언, 사용되다가 소멸
void increase(int x) {
  x++; // x를 1증가
  cout << "x in increase: " << x << endl;
}

int main() {
  int x = 10; //초기화: initialization
  cout << x << endl;
  increase(x);
  cout << x << endl; // 출력: 11
  return 0;
}
--------------------------------------------------------------------------
//global variable: 함수 밖에서 선언 ; 한번 만들면 없애기가 힘듬, 값을 변경하면 모든 함수에서 값이 변경됨
int gX;
void print() {
  gX = 1000;
  cout << "gX in print: " << gX << endl; // 출력: 100
}

int main() {
  int gX = 10; // local variable. global variable과 충돌하지만 C++은 local을 우선시함
  cout << gX << endl; // 출력: 10
  print(); // 출력: 1000
  return 0;
}
-----------------------------------------------------------------------------------
//재귀함수(recursive function): 자기 자신을 자기자신의 내부에서 호출
                              : 모든 재귀함수는 반목문으로 구현가능
                              : 하지만 조건문이 있어야 멈출 수 있음
int pow2(int n) {
  if (n==0)
    return 1;
  return 2*pow2(n-1);
}
int factorial(int n) {
  if (n==0)
    return 1;
  return n*factorial(n-1);
}

int main() {
  int x;
  cin >> x;
  cout << factorial(x) << endl;
  cout << pow2(x) << endl;
}
